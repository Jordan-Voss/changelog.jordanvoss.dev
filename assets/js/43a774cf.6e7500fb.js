"use strict";(self.webpackChunkchangelog_jordanvoss_dev=self.webpackChunkchangelog_jordanvoss_dev||[]).push([[4642],{220:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/primitive-9e5378e3272757fb389ec373711a18f3.png"},7899:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>o,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"roadmap/java/basics/variables-data-types","title":"Variables and Data Types","description":"Understanding variables and data types is foundational to programming in Java. This section breaks down what they are, how they\'re used, and some common pitfalls.","source":"@site/docs/roadmap/java/basics/variables-data-types.md","sourceDirName":"roadmap/java/basics","slug":"/roadmap/java/basics/variables-data-types","permalink":"/roadmap/java/basics/variables-data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/jordanvoss/dev-journey-site/edit/main/docs/roadmap/java/basics/variables-data-types.md","tags":[],"version":"current","frontMatter":{"id":"variables-data-types","title":"Variables and Data Types","sidebar_label":"Variables & Data Types","slug":"/roadmap/java/basics/variables-data-types"},"sidebar":"tutorialSidebar","previous":{"title":"Basics","permalink":"/roadmap/java/basics"},"next":{"title":"Strings & Methods","permalink":"/roadmap/java/basics/strings-methods"}}');var i=s(4848),t=s(8453);const d={id:"variables-data-types",title:"Variables and Data Types",sidebar_label:"Variables & Data Types",slug:"/roadmap/java/basics/variables-data-types"},a="\u2615 Java Variables & Data Types",l={},c=[{value:"\ud83e\uddee What is a Variable?",id:"-what-is-a-variable",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"\ud83d\udce6 Java Data Types",id:"-java-data-types",level:2},{value:"1. <strong>Primitive Types</strong>",id:"1-primitive-types",level:3},{value:"2. <strong>Reference Types</strong> (objects)",id:"2-reference-types-objects",level:3},{value:"\ud83d\udd04 Type Conversion",id:"-type-conversion",level:2},{value:"Implicit Conversion (Widening)",id:"implicit-conversion-widening",level:3},{value:"Explicit Conversion (Narrowing)",id:"explicit-conversion-narrowing",level:3},{value:"\ud83e\udde0 Final Keyword (Constants)",id:"-final-keyword-constants",level:2},{value:"\u2705 Summary",id:"-summary",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-java-variables--data-types",children:"\u2615 Java Variables & Data Types"})}),"\n",(0,i.jsx)(n.p,{children:"Understanding variables and data types is foundational to programming in Java. This section breaks down what they are, how they're used, and some common pitfalls."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-what-is-a-variable",children:"\ud83e\uddee What is a Variable?"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"variable"})," is a container that holds data during the execution of a program. In Java, every variable must be declared with a ",(0,i.jsx)(n.strong,{children:"type"}),". ",(0,i.jsx)(n.strong,{children:"Declaring a variable"})," means telling the compiler what type of data you want to store and what you want to name that storage location."]}),"\n",(0,i.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"type variableName = value;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"type"})," -> the ",(0,i.jsx)(n.strong,{children:"data type"})," of the variable (e.g. ",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"String"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"variableName"})," -> the ",(0,i.jsx)(n.strong,{children:"identifier"})," or ",(0,i.jsx)(n.strong,{children:"name"})," you assign to the variable."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'int age = 27;\nString name = "Jordan";\n'})}),"\n",(0,i.jsx)(n.p,{children:"This example will:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a variable called ",(0,i.jsx)(n.code,{children:"age"})," that will store the ",(0,i.jsx)(n.code,{children:"int"})," ",(0,i.jsx)(n.code,{children:"27"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a variable called ",(0,i.jsx)(n.code,{children:"name"})," that will store the ",(0,i.jsx)(n.code,{children:"String"})," (object) ",(0,i.jsx)(n.code,{children:"'Jordan'"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-java-data-types",children:"\ud83d\udce6 Java Data Types"}),"\n",(0,i.jsxs)(n.p,{children:["Java is a ",(0,i.jsx)(n.strong,{children:"statically typed"})," language, which means each variable\u2019s type must be known at compile time. Java\u2019s data types are divided into two groups:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Primitive Types"}),"\n",(0,i.jsx)(n.li,{children:"Object References"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The key difference is where and how the value is stored:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Primitive values live on the ",(0,i.jsx)(n.strong,{children:"stack"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Objects live in the ",(0,i.jsx)(n.strong,{children:"heap"}),", and the variable holds a reference to the heap in the stack."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-primitive-types",children:["1. ",(0,i.jsx)(n.strong,{children:"Primitive Types"})]}),"\n",(0,i.jsx)(n.p,{children:"There are 8 primitive types:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Size"}),(0,i.jsx)(n.th,{children:"Range / Notes"}),(0,i.jsx)(n.th,{children:"Example"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:"1-bit"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"})]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean isTrue = true;"})}),(0,i.jsx)(n.td,{children:"A binary true/false value"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"byte"})}),(0,i.jsx)(n.td,{children:"8-bit"}),(0,i.jsx)(n.td,{children:"-128 to 127"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"byte b = 1;"})}),(0,i.jsx)(n.td,{children:"Very small integer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"short"})}),(0,i.jsx)(n.td,{children:"16-bit"}),(0,i.jsx)(n.td,{children:"-32,768 to 32,767"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"short s = 2;"})}),(0,i.jsx)(n.td,{children:"Small integer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{children:"32-bit"}),(0,i.jsx)(n.td,{children:"-2,147,483,648 to 2,147,483,647"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int i = 10;"})}),(0,i.jsx)(n.td,{children:"Most common integer type"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"long"})}),(0,i.jsx)(n.td,{children:"64-bit"}),(0,i.jsx)(n.td,{children:"-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"long l = 100000L;"})}),(0,i.jsx)(n.td,{children:"Large integer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"float"})}),(0,i.jsx)(n.td,{children:"32-bit"}),(0,i.jsx)(n.td,{children:"Approx. \xb13.4e38, 6\u20137 decimal digits precision"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"float f = 3.14f;"})}),(0,i.jsxs)(n.td,{children:["Decimal (requires ",(0,i.jsx)(n.code,{children:"f"})," suffix)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsx)(n.td,{children:"64-bit"}),(0,i.jsx)(n.td,{children:"Approx. \xb11.8e308, 15 decimal digits precision"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double d = 3.14;"})}),(0,i.jsx)(n.td,{children:"More precise decimal"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"char"})}),(0,i.jsx)(n.td,{children:"16-bit"}),(0,i.jsxs)(n.td,{children:["Unicode characters, e.g., ",(0,i.jsx)(n.code,{children:"'A'"}),", ",(0,i.jsx)(n.code,{children:"'1'"}),", ",(0,i.jsx)(n.code,{children:"'\\u0041'"})]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"char c = 'A';"})}),(0,i.jsx)(n.td,{children:"A single character"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["When declaring a variable that is a ",(0,i.jsx)(n.strong,{children:"primitive type"})," the actual value is stored in the memory allocated to that variable"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"int a = 10;",children:"int b = a;\nb = 20;\n// 'a' is still 10, because 'b' is a separate piece of memory copied from 'a'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Primitive Types",src:s(220).A+"",width:"1511",height:"615"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-reference-types-objects",children:["2. ",(0,i.jsx)(n.strong,{children:"Reference Types"})," (objects)"]}),"\n",(0,i.jsxs)(n.p,{children:["Reference types store a ",(0,i.jsx)(n.strong,{children:"reference (memory address)"})," that points to the actual object stored in the ",(0,i.jsx)(n.strong,{children:"heap"}),". The reference itself is stored in the ",(0,i.jsx)(n.strong,{children:"stack"}),", but the object it refers to lives in the heap."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Size"}),(0,i.jsx)(n.th,{children:"Mutability"}),(0,i.jsx)(n.th,{children:"Example"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Boolean"})}),(0,i.jsx)(n.td,{children:"1-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Boolean isTrue = true;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"boolean"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Byte"})}),(0,i.jsx)(n.td,{children:"8-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Byte b = 1;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"byte"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Short"})}),(0,i.jsx)(n.td,{children:"16-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Short s = 2;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"short"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Character"})}),(0,i.jsx)(n.td,{children:"16-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Character c = 'A';"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"char"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Integer"})}),(0,i.jsx)(n.td,{children:"32-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Integer i = 10;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"int"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Long"})}),(0,i.jsx)(n.td,{children:"64-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Long l = 100000L;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"long"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Float"})}),(0,i.jsx)(n.td,{children:"32-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Float f = 3.14f;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"float"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Double"})}),(0,i.jsx)(n.td,{children:"64-bit"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Double d = 3.14;"})}),(0,i.jsxs)(n.td,{children:["Wrapper for ",(0,i.jsx)(n.code,{children:"double"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:"N/A"}),(0,i.jsx)(n.td,{children:"Immutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'String s = "hello";'})}),(0,i.jsx)(n.td,{children:"Textual data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array"})}),(0,i.jsx)(n.td,{children:"N/A"}),(0,i.jsx)(n.td,{children:"Mutable"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int[] arr = {1, 2, 3};"})}),(0,i.jsx)(n.td,{children:"Fixed-size, ordered collection"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"\ud83e\udde0 Mutability Notes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Wrapper classes (Integer -> int, Double -> double, etc.) is an object representation of a primitive data type. These classes as well as Strings are immutable, meaning their value cannot be changed after creation. Any operation creates a new object."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Arrays are mutable, you can change their contents even though the reference points to the same memory."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Immutable Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'String name = "Jordan";\nString anotherName = name;\n\nanotherName = "Alex";\n\n// \'name\' is still "Jordan" because \'String\' is immutable\nSystem.out.println(name);        // Jordan\nSystem.out.println(anotherName); // Alex\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mutable Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"int[] numbers = {1, 2, 3};\nint[] moreNumbers = numbers;\n\nmoreNumbers[0] = 99;\n\n// Both variables now point to the same array in memory\nSystem.out.println(numbers[0]);     // 99\nSystem.out.println(moreNumbers[0]); // 99\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-type-conversion",children:"\ud83d\udd04 Type Conversion"}),"\n",(0,i.jsx)(n.h3,{id:"implicit-conversion-widening",children:"Implicit Conversion (Widening)"}),"\n",(0,i.jsx)(n.p,{children:"Java automatically converts smaller types to larger types."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"int a = 10;\nlong b = a; // OK\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"explicit-conversion-narrowing",children:"Explicit Conversion (Narrowing)"}),"\n",(0,i.jsx)(n.p,{children:"Requires casting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"double pi = 3.14;\nint rounded = (int) pi; // 3\n\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-final-keyword-constants",children:"\ud83e\udde0 Final Keyword (Constants)"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"final"})," to make a variable ",(0,i.jsx)(n.strong,{children:"constant"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"final double PI = 3.14159;\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once assigned, it can\u2019t be changed."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-summary",children:"\u2705 Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Variables store data and must be typed."}),"\n",(0,i.jsxs)(n.li,{children:["Java has ",(0,i.jsx)(n.strong,{children:"8 primitive types"})," and many reference types."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"final"})," to declare constants."]}),"\n",(0,i.jsxs)(n.li,{children:["Be careful with ",(0,i.jsx)(n.strong,{children:"type conversions"})," to avoid data loss."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"notion://www.notion.so/roadmap/java/basics",children:"\u2b05 Back to Java Basics"})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function d(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);