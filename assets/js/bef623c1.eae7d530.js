"use strict";(self.webpackChunkchangelog_jordanvoss_dev=self.webpackChunkchangelog_jordanvoss_dev||[]).push([[1777],{969:(e,n,s)=>{s.d(n,{A:()=>r});s(6540);var t=s(6347),a=s(4848);function r({fallback:e="/docs/glossary/glossary-index"}){const n=(0,t.W6)();return(0,a.jsx)("a",{href:e,onClick:s=>{s.preventDefault();const t=sessionStorage.getItem("prevAnchor");t?n.push(t):n.push(e)},style:{display:"inline-block",marginTop:"1rem"},children:"\u2b05 Back"})}},1194:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"glossary/stack","title":"Stack","description":"Definition:","source":"@site/docs/glossary/stack.md","sourceDirName":"glossary","slug":"/glossary/stack","permalink":"/glossary/stack","draft":false,"unlisted":false,"editUrl":"https://github.com/jordanvoss/dev-journey-site/edit/main/docs/glossary/stack.md","tags":[],"version":"current","frontMatter":{"id":"stack","title":"Stack","slug":"/glossary/stack"}}');var a=s(4848),r=s(8453),l=s(969);const i={id:"stack",title:"Stack",slug:"/glossary/stack"},o="Stack",c={},d=[{value:"Detailed Explanation",id:"detailed-explanation",level:2},{value:"Example",id:"example",level:2},{value:"Related Terms",id:"related-terms",level:2}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"stack",children:"Stack"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Definition:"}),(0,a.jsx)(n.br,{}),"\n","A region of memory that stores method calls and primitive variables, managed in a last-in-first-out manner."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"detailed-explanation",children:"Detailed Explanation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The stack is used for storing local variables and call frames."}),"\n",(0,a.jsx)(n.li,{children:"It automatically manages memory allocation and deallocation."}),"\n",(0,a.jsx)(n.li,{children:"Exceeding stack limits results in a stack overflow error."}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"// Stack usage example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// function callA() { callB(); }\n// function callB() { /* stack frame for callB */ }\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"related-terms",children:"Related Terms"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/glossary/heap",children:"Heap"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/glossary/primitive-type",children:"Primitive Type"})}),"\n"]}),"\n",(0,a.jsx)(l.A,{})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var t=s(6540);const a={},r=t.createContext(a);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);