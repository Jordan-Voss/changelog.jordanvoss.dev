"use strict";(self.webpackChunkchangelog_jordanvoss_dev=self.webpackChunkchangelog_jordanvoss_dev||[]).push([[3387],{1135:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>x,default:()=>u,frontMatter:()=>j,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"roadmap/java/basics/variables/variables-data-types","title":"Variables and Data Types","description":"Understanding variables and data types is foundational to programming in Java. This section breaks down what they are, how they\'re used, and some common pitfalls.","source":"@site/docs/roadmap/java/basics/variables/variables-data-types.mdx","sourceDirName":"roadmap/java/basics/variables","slug":"/roadmap/java/basics/variables/variables-data-types","permalink":"/roadmap/java/basics/variables/variables-data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/jordanvoss/dev-journey-site/edit/main/docs/roadmap/java/basics/variables/variables-data-types.mdx","tags":[],"version":"current","frontMatter":{"id":"variables-data-types","title":"Variables and Data Types","sidebar_label":"Variables & Data Types","slug":"/roadmap/java/basics/variables/variables-data-types"},"sidebar":"tutorialSidebar","previous":{"title":"Basics","permalink":"/roadmap/java/basics"},"next":{"title":"Naming","permalink":"/roadmap/java/basics/variables/variable-naming"}}');var s=i(4848),a=i(8453),r=i(6540),l=i(6347),d=i(4164),o=i(8234);const c={wrapper:"wrapper_q_0E",termBtn:"termBtn_WijF",bold:"bold_F1Vr",tooltip:"tooltip_tUco",open:"open_E_I5",content:"content_ze2U",footer:"footer_aUQD",linkBtn:"linkBtn_gLlB",arrow:"arrow_fRaS"};function h({term:e,definition:n,link:i,placement:t="bottom",bold:a=!1}){const[h,j]=(0,r.useState)(!1),x=(0,l.W6)(),p=(0,r.useId)(),m=(0,r.useRef)(null),b=(0,r.useRef)(null),u=(0,r.useRef)(null);(0,r.useEffect)(()=>(m.current&&b.current&&(u.current=(0,o.n4)(m.current,b.current,{placement:t,modifiers:[{name:"preventOverflow",options:{padding:8}},{name:"flip",options:{fallbackPlacements:["top","bottom"]}}]})),()=>{u.current?.destroy()}),[t]),(0,r.useEffect)(()=>{u.current?.update()},[h]);const g=()=>{const e=window.location.pathname+window.location.hash;sessionStorage.setItem("prevAnchor",e),x.push(i)};return(0,s.jsxs)("span",{className:c.wrapper,onMouseEnter:()=>j(!0),onMouseLeave:()=>j(!1),onFocus:()=>j(!0),onBlur:()=>j(!1),children:[(0,s.jsx)("button",{type:"button","aria-describedby":h?p:void 0,className:(0,d.A)(c.termBtn,a&&c.bold),onClick:g,ref:m,children:e}),(0,s.jsxs)("div",{id:p,role:"tooltip",className:(0,d.A)(c.tooltip,h&&c.open),ref:b,children:[(0,s.jsx)("div",{className:c.content,children:n}),(0,s.jsx)("div",{className:c.footer,children:(0,s.jsx)("button",{type:"button",className:c.linkBtn,onClick:e=>{e.stopPropagation(),g()},children:"Read more \u2192"})}),(0,s.jsx)("div",{className:c.arrow,"data-popper-arrow":!0})]})]})}const j={id:"variables-data-types",title:"Variables and Data Types",sidebar_label:"Variables & Data Types",slug:"/roadmap/java/basics/variables/variables-data-types"},x="Java Variables & Data Types",p={},m=[{value:"On this page you\u2019ll learn:",id:"on-this-page-youll-learn",level:2},{value:"What is a Variable?",id:"what-is-a-variable",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Declaring vs Initialising",id:"declaring-vs-initialising",level:3},{value:"Java Data Types",id:"java-data-types",level:2},{value:"1. <strong>Primitive Types</strong>",id:"1-primitive-types",level:3},{value:"2. <strong>Reference Types</strong> (objects)",id:"2-reference-types-objects",level:3},{value:"Mutability Notes:",id:"mutability-notes",level:4},{value:"Type Conversion",id:"type-conversion",level:2},{value:"<GlossaryTooltip></GlossaryTooltip> <GlossaryTooltip></GlossaryTooltip>",id:"-",level:3},{value:"Order of promotion",id:"order-of-promotion",level:4},{value:"Example of promoting int to float and long",id:"example-of-promoting-int-to-float-and-long",level:4},{value:"Why is float considered larger than long in Java?",id:"why-is-float-considered-larger-than-long-in-java",level:4},{value:"Type Promotion Rules",id:"type-promotion-rules",level:4},{value:"<GlossaryTooltip></GlossaryTooltip> <GlossaryTooltip></GlossaryTooltip>",id:"--1",level:3},{value:"When casting is necessary",id:"when-casting-is-necessary",level:4},{value:"Example of \t<GlossaryTooltip></GlossaryTooltip> when casting",id:"example-of--when-casting",level:3},{value:"Summary",id:"summary",level:2}];function b(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"java-variables--data-types",children:"Java Variables & Data Types"})}),"\n",(0,s.jsx)(n.p,{children:"Understanding variables and data types is foundational to programming in Java. This section breaks down what they are, how they're used, and some common pitfalls."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"on-this-page-youll-learn",children:"On this page you\u2019ll learn:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How to declare and initialize variables"}),"\n",(0,s.jsx)(n.li,{children:"The difference between primitive and reference types"}),"\n",(0,s.jsx)(n.li,{children:"How to convert data types through promotion and casting"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"what-is-a-variable",children:"What is a Variable?"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(h,{term:"variable",definition:"A named storage location in memory for data, which has a type.",link:"/glossary/variable",bold:"true"})," is a container that holds data during the execution of a program. In Java, every variable must be declared with a ",(0,s.jsx)(h,{term:"type",definition:"A category of data that determines the possible values and operations for a variable.",link:"/glossary/data-type",bold:"true"}),". ",(0,s.jsx)(n.strong,{children:"Declaring a variable"})," means telling the compiler what type of data you want to store and what you want to name that storage location."]}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"type variableName = value;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"type"})," -> the ",(0,s.jsx)(h,{term:"data type",definition:"Specifies the kind of data a variable can hold, such as integer, floating-point, or text.",link:"/glossary/data-type",bold:"true"})," of the variable (e.g. ",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"String"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"variableName"})," -> the \t",(0,s.jsx)(h,{term:"identifier",definition:"The name given to a variable, method, class, or other element in code.",link:"/glossary/identifier",bold:"true"})," or ",(0,s.jsx)(n.strong,{children:"name"})," you assign to the variable."]}),"\n",(0,s.jsx)(n.h3,{id:"declaring-vs-initialising",children:"Declaring vs Initialising"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Variable \t",(0,s.jsx)(h,{term:"declaration",definition:"The act of defining a variable's name and type without assigning a value.",link:"/glossary/declaration",bold:"true"})," tells the compiler the ",(0,s.jsx)(n.strong,{children:"name"})," and ",(0,s.jsx)(n.strong,{children:"type"})," of the variable"]}),"\n",(0,s.jsxs)(n.li,{children:["Variable ",(0,s.jsx)(h,{term:"initialization",definition:"Assigning an initial value to a variable at the time of declaration or later.",link:"/glossary/initialization",bold:"true"})," assigns an initial value to the variable\nYou can declare and initialise variables at the same time"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'int age = 27;\nString name = "Jordan";\n'})}),"\n",(0,s.jsx)(n.p,{children:"This example will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a variable called ",(0,s.jsx)(n.code,{children:"age"})," that will store the ",(0,s.jsx)(n.code,{children:"int"})," ",(0,s.jsx)(n.code,{children:"27"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a variable called ",(0,s.jsx)(n.code,{children:"name"})," that will store the ",(0,s.jsx)(n.code,{children:"String"})," (object) ",(0,s.jsx)(n.code,{children:"'Jordan'"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Or"})}),"\n",(0,s.jsx)(n.p,{children:"You can declare the variable first and assign a value later."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"int age;\nage = 27;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"java-data-types",children:"Java Data Types"}),"\n",(0,s.jsxs)(n.p,{children:["Java is a ",(0,s.jsx)(n.strong,{children:"statically typed"})," language, which means each variable\u2019s type must be known at compile time. Java\u2019s data types are divided into two groups:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(h,{term:"Primitive Types",definition:"A basic data type built into the language, such as int, float, or char.",link:"/glossary/primitive-type",bold:"true"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(h,{term:"Object References",definition:"A data type that stores a reference to an object in memory, rather than the object itself.",link:"/glossary/reference-type",bold:"true"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The key difference is where and how the value is stored:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Primitive values live on the ",(0,s.jsx)(h,{term:"stack",definition:"A region of memory that stores method calls and primitive variables, managed in a last-in-first-out manner.",link:"/glossary/stack",bold:"true"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Objects live in the ",(0,s.jsx)(h,{term:"heap",definition:"A region of memory used for storing objects and class instances, managed by the garbage collector.",link:"/glossary/heap",bold:"true"}),", and the variable holds a reference to the heap in the stack."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-primitive-types",children:["1. ",(0,s.jsx)(n.strong,{children:"Primitive Types"})]}),"\n",(0,s.jsx)(n.p,{children:"There are 8 primitive types:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{children:"Range / Notes"}),(0,s.jsx)(n.th,{children:"Example"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"byte"})}),(0,s.jsx)(n.td,{children:"8-bit"}),(0,s.jsx)(n.td,{children:"-128 to 127"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"byte b = 1;"})}),(0,s.jsx)(n.td,{children:"Very small integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"short"})}),(0,s.jsx)(n.td,{children:"16-bit"}),(0,s.jsx)(n.td,{children:"-32,768 to 32,767"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"short s = 2;"})}),(0,s.jsx)(n.td,{children:"Small integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:"32-bit"}),(0,s.jsx)(n.td,{children:"-2,147,483,648 to 2,147,483,647"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int i = 10;"})}),(0,s.jsx)(n.td,{children:"Most common integer type"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"long"})}),(0,s.jsx)(n.td,{children:"64-bit"}),(0,s.jsx)(n.td,{children:"-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"long l = 100000L;"})}),(0,s.jsx)(n.td,{children:"Large integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"float"})}),(0,s.jsx)(n.td,{children:"32-bit"}),(0,s.jsx)(n.td,{children:"Approx. \xb13.4e38, 6\u20137 decimal digits precision"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"float f = 3.14f;"})}),(0,s.jsxs)(n.td,{children:["Decimal (requires ",(0,s.jsx)(n.code,{children:"f"})," suffix)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"double"})}),(0,s.jsx)(n.td,{children:"64-bit"}),(0,s.jsx)(n.td,{children:"Approx. \xb11.8e308, 15 decimal digits precision"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"double d = 3.14;"})}),(0,s.jsx)(n.td,{children:"More precise decimal"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"char"})}),(0,s.jsx)(n.td,{children:"16-bit"}),(0,s.jsxs)(n.td,{children:["Unicode characters, e.g., ",(0,s.jsx)(n.code,{children:"'A'"}),", ",(0,s.jsx)(n.code,{children:"'1'"}),", ",(0,s.jsx)(n.code,{children:"'\\u0041'"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"char c = 'A';"})}),(0,s.jsx)(n.td,{children:"A single character"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["When declaring a variable that is a ",(0,s.jsx)(n.strong,{children:"primitive type"})," the actual value is stored in the memory allocated to that variable"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"int a = 10;\nint b = a;\nb = 20;\n// 'a' is still 10, because 'b' is a separate piece of memory copied from 'a'\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Primitive Types",src:i(8376).A+"",width:"13227",height:"5730"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-reference-types-objects",children:["2. ",(0,s.jsx)(n.strong,{children:"Reference Types"})," (objects)"]}),"\n",(0,s.jsxs)(n.p,{children:["Reference types store a ",(0,s.jsx)(n.strong,{children:"reference (memory address)"})," that points to the actual object stored in the ",(0,s.jsx)(n.strong,{children:"heap"}),". The reference itself is stored in the ",(0,s.jsx)(n.strong,{children:"stack"}),", but the object it refers to lives in the heap."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{children:"Mutability"}),(0,s.jsx)(n.th,{children:"Example"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean"})}),(0,s.jsx)(n.td,{children:"1-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean isTrue = true;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"boolean"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Byte"})}),(0,s.jsx)(n.td,{children:"8-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Byte b = 1;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"byte"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Short"})}),(0,s.jsx)(n.td,{children:"16-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Short s = 2;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"short"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Character"})}),(0,s.jsx)(n.td,{children:"16-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Character c = 'A';"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"char"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Integer"})}),(0,s.jsx)(n.td,{children:"32-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Integer i = 10;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"int"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Long"})}),(0,s.jsx)(n.td,{children:"64-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Long l = 100000L;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"long"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Float"})}),(0,s.jsx)(n.td,{children:"32-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Float f = 3.14f;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"float"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Double"})}),(0,s.jsx)(n.td,{children:"64-bit"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Double d = 3.14;"})}),(0,s.jsxs)(n.td,{children:["Wrapper for ",(0,s.jsx)(n.code,{children:"double"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:"N/A"}),(0,s.jsx)(n.td,{children:"Immutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'String s = "hello";'})}),(0,s.jsx)(n.td,{children:"Textual data"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Array"})}),(0,s.jsx)(n.td,{children:"N/A"}),(0,s.jsx)(n.td,{children:"Mutable"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int[] arr = {1, 2, 3};"})}),(0,s.jsx)(n.td,{children:"Fixed-size, ordered collection"})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"mutability-notes",children:"Mutability Notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Wrapper classes (Integer -> int, Double -> double, etc.) is an object representation of a primitive data type. These classes as well as Strings are immu",(0,s.jsx)(h,{term:"immutable",definition:"An object whose state cannot be changed after it is created.",link:"/glossary/immutable",bold:"false"}),"table, meaning their value cannot be changed after creation. Any operation creates a new object."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Arrays are \t",(0,s.jsx)(h,{term:"mutable",definition:"An object whose state can be changed after creation.",link:"/glossary/mutable",bold:"false"}),", you can change their contents even though the reference points to the same memory."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Immutable Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'String name = "Jordan";\nString anotherName = name;\n\nanotherName = "Alex";\n\n// \'name\' is still "Jordan" because \'String\' is immutable\nSystem.out.println(name);        // Jordan\nSystem.out.println(anotherName); // Alex\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Reference Types Immutable",src:i(7639).A+"",width:"25085",height:"7995"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Mutable Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"int[] numbers = {1, 2, 3};\nint[] moreNumbers = numbers;\n\nmoreNumbers[0] = 99;\n\n// Both variables now point to the same array in memory\nSystem.out.println(numbers[0]);     // 99\nSystem.out.println(moreNumbers[0]); // 99\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Reference Types Mutable",src:i(9637).A+"",width:"1223",height:"374"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"type-conversion",children:"Type Conversion"}),"\n",(0,s.jsxs)(n.h3,{id:"-",children:[(0,s.jsx)(h,{term:"Type Promotion",definition:"The automatic conversion of a smaller data type into a larger compatible type.",link:"/glossary/type-promotion",bold:"true"})," ",(0,s.jsx)(h,{term:"(Widening)",definition:"Another term for type promotion, converting to a larger type without loss of data.",link:"/glossary/widening",bold:"true"})]}),"\n",(0,s.jsx)(n.p,{children:"Java automatically converts smaller types to larger types without losing data as the larger type can fully represent the smaller type's range."}),"\n",(0,s.jsx)(n.h4,{id:"order-of-promotion",children:"Order of promotion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"byte \u2192 short \u2192 int \u2192 long \u2192 float \u2192 double\n                \u2191\n               char\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-of-promoting-int-to-float-and-long",children:"Example of promoting int to float and long"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'int i = 10;\nlong l= i;\nfloat f = l;\n\nSystem.out.println("int: " + i);\nSystem.out.println("long: " + l);\nSystem.out.println("float: " + f);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"int: 10\nlong: 10\nfloat: 10.0\n"})}),"\n",(0,s.jsx)(n.h4,{id:"why-is-float-considered-larger-than-long-in-java",children:"Why is float considered larger than long in Java?"}),"\n",(0,s.jsx)(n.p,{children:'Even though long is a 64 bit integer, and float is a 32 bit floating point, Java treats float as "wider" as a float can represent a larger range of values\nAnalogy:\nImagine long is a list of whole numbers between 1 and 10:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n"})}),"\n",(0,s.jsx)(n.p,{children:"Whereas a float (to 1 decimal place) could store:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1.0, 1.1, 1.2, ..., 9.8, 9.9, 10.0\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is already more distinct values than the integer-only long in this small range and in reality floats can store values in the millions, billions, and even tiny decimals like 0.000001."}),"\n",(0,s.jsx)(n.h4,{id:"type-promotion-rules",children:"Type Promotion Rules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only works from smaller to larger types in terms of range, not just byte size"}),"\n",(0,s.jsx)(n.li,{children:"works between primitives of compatible types (char can be promoted to int and anything larger because it can be represented by a unicode number)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"char c = 'A'; // 'A' in Unicode is 65\nint i = c;\n\nSystem.out.println(\"int: \" + c);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"65\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"--1",children:[(0,s.jsx)(h,{term:"Casting",definition:"Manually converting a value from one data type to another.",link:"/glossary/casting",bold:"true"})," ",(0,s.jsx)(h,{term:"narrowing",definition:"A type of casting that converts from a larger data type to a smaller one, potentially losing data.",link:"/glossary/narrowing",bold:"true"})]}),"\n",(0,s.jsx)(n.p,{children:"Type casting is when you convert a value from a larger type to a smaller type. This cannot be done automatically and needs to be explicitly cast to the smaller value as there is a risk of data loss."}),"\n",(0,s.jsx)(n.h4,{id:"when-casting-is-necessary",children:"When casting is necessary"}),"\n",(0,s.jsx)(n.p,{children:"Casting can be used when you want to perform operations between different data types or you need to store a value of one type in a variable of another type."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"double pi = 3.14;\nint i = (int) pi;\n\nSystem.out.println(i);\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"3\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"example-of--when-casting",children:["Example of \t",(0,s.jsx)(h,{term:"overflow",definition:"When a value exceeds the maximum or minimum limit of its data type, causing it to wrap around.",link:"/glossary/overflow",bold:"true"})," when casting"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"int big = 130;\nbyte small = (byte) big; // byte range: -128 to 127\n\nSystem.out.println(small);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"-126\n"})}),"\n",(0,s.jsx)(n.p,{children:"The byte value wraps around to the lower end of the range because 130 is too large for a byte."}),"\n",(0,s.jsxs)(n.p,{children:["This happens because Java uses ",(0,s.jsx)(h,{term:"two\u2019s complement",definition:"A binary representation for signed integers where the MSB indicates sign.",link:"/glossary/twos-complement",bold:"true"})," for signed integers.\nto represent signed integers.",(0,s.jsx)(n.br,{}),"\n","In two\u2019s complement, when a value exceeds the maximum (",(0,s.jsx)(n.code,{children:"127"})," for a byte), it wraps around from the negative side of the range, producing ",(0,s.jsx)(n.code,{children:"-126"})," in this case."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Variables store data and must be typed."}),"\n",(0,s.jsxs)(n.li,{children:["Java has ",(0,s.jsx)(n.strong,{children:"8 primitive types"})," and many reference types."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"final"})," to declare constants."]}),"\n",(0,s.jsxs)(n.li,{children:["Be careful with ",(0,s.jsx)(n.strong,{children:"type conversions"})," to avoid data loss."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Learn more:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./variable-scope",children:"Variable Scope"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./variable-modifiers",children:"Modifiers: public, private, static, final"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"notion://www.notion.so/roadmap/java/basics",children:"\u2b05 Back to Java Basics"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}},7639:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/reference-types-immutable-b056015d6221d48592ac3125c55f19e1.png"},8376:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Primitive-types-c8bb5b1e1adf2eb7832899a66687fb38.png"},9637:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/reference-types-mutable-d4c878687395c1111938c326d07776df.png"}}]);